#!/usr/bin/env node
'use strict';

var jdists = require('../.');
var util = require('util');
var optimist = require('optimist');
var fs = require('fs');
var path = require('path');

jdists.setEncoding('inline', require('../src/encoding/processor-inline'));

var argv = optimist
  .usage('$0 input1.js [input2.js] [options]')
  .alias('r', 'remove')
  .describe('r', 'remove block.')
  .default('r', 'debug,test')
  .alias('t', 'trigger')
  .describe('t', 'trigger block.')
  .default('t', 'release')
  .string('r')
  .alias("o", "output")
  .describe('o', 'output file.')
  .string('o')
  .alias("v", "version")
  .describe("v", "Print version number and exit.")
  .wrap(80)
  .argv
;

if (argv.version) {
  var json = require("../package.json");
  util.puts(json.name + ' ' + json.version);
  return;
}

if (argv._.length < 1) {
  util.puts('The input file is not specified.');
  return;
}

var contents = [];
var filenames = [];
argv._.forEach(function(filename) {
  filenames.push(filename);
  contents.push(jdists.build(filename, argv));
});
var content = contents.join('\n');
if (argv.output) {
  jdists.forceDirSync(path.dirname(argv.output));
  fs.writeFileSync(argv.output, content);
  util.puts(util.format('%j jdists output complete.', filenames));
} else {
  console.log(content);
}
#!/usr/bin/env node
'use strict';

var jdists = require('../.');
var common = require('../src/common');
var forceDirSync = common.forceDirSync;

var util = require('util');
var optimist = require('optimist');
var fs = require('fs');
var path = require('path');

jdists.setEncoding('inline', require('../src/encoding/processor-inline'));
jdists.setEncoding('require', require('../src/encoding/processor-require'));
jdists.setEncoding('zero', require('../src/encoding/processor-zero'));
jdists.setEncoding('concat', require('../src/encoding/processor-concat'));
jdists.setEncoding('relative', require('../src/encoding/processor-relative'));
jdists.setEncoding('template', require('../src/encoding/processor-template'));
jdists.setEncoding('jjencode', require('../src/encoding/processor-jjencode'));
jdists.setEncoding('regex', require('../src/encoding/processor-regex'));

var argv = optimist
  .usage('$0 input1.js [input2.js] [options]')
  .alias('r', 'remove')
  .describe('r', 'remove block.')
  .default('r', 'debug,test')
  .alias('t', 'trigger')
  .describe('t', 'trigger block.')
  .default('t', 'release')
  .string('r')
  .alias("o", "output")
  .describe('o', 'output file.')
  .string('o')
  .alias("clean", "clean")
  .describe('c', 'clean white space.')
  .boolean('c')
  .alias("v", "version")
  .describe("v", "Print version number and exit.")
  .wrap(80)
  .argv
;

if (argv.version) {
  var json = require("../package.json");
  util.puts(json.name + ' ' + json.version);
  return;
}

if (argv._.length < 1) {
  util.puts('The input file is not specified.');
  return;
}

var contents = [];
var filenames = [];
argv._.forEach(function(filename) {
  filenames.push(filename);
  contents.push(jdists.build(filename, argv));
});
var content = contents.join('\n');
if (argv.output) {
  forceDirSync(path.dirname(argv.output));
  fs.writeFileSync(argv.output, content);
  util.puts(util.format('%j jdists output complete.', filenames));
} else {
  console.log(content);
}